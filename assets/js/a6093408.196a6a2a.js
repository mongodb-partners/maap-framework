"use strict";(self.webpackChunkmaap_docs=self.webpackChunkmaap_docs||[]).push([[3538],{8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var i=s(6540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}},9294:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"framework/agentic/components/mcp-server","title":"MCP Server","description":"Memory-MCP is a MongoDB-based Model Context Protocol (MCP) server that provides intelligent memory management, semantic caching, and hybrid search capabilities for AI applications. The system integrates with AWS Bedrock for embedding generation, MongoDB for data storage, and Tavily for web search functionality.","source":"@site/docs/framework/agentic/components/mcp-server.md","sourceDirName":"framework/agentic/components","slug":"/framework/agentic/components/mcp-server","permalink":"/maap-framework/docs/framework/agentic/components/mcp-server","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Data Loader","permalink":"/maap-framework/docs/framework/agentic/components/data-loader"},"next":{"title":"Demos","permalink":"/maap-framework/docs/category/demos"}}');var r=s(4848),t=s(8453);const l={},o="MCP Server",c={},a=[{value:"Key Features",id:"key-features",level:3},{value:"Target Audience",id:"target-audience",level:3},{value:"2. System Architecture",id:"2-system-architecture",level:2},{value:"3. Components",id:"3-components",level:2},{value:"3.1 Memory-MCP Server (Main Component)",id:"31-memory-mcp-server-main-component",level:3},{value:"3.2 AI Memory Service",id:"32-ai-memory-service",level:3},{value:"3.3 Semantic Cache Service",id:"33-semantic-cache-service",level:3},{value:"3.4 Event Logger Service",id:"34-event-logger-service",level:3},{value:"3.5 MongoDB Service Integration",id:"35-mongodb-service-integration",level:3},{value:"3.6 AWS Bedrock Integration",id:"36-aws-bedrock-integration",level:3},{value:"3.7 External Services",id:"37-external-services",level:3},{value:"4. Installation &amp; Deployment",id:"4-installation--deployment",level:2},{value:"4.1 Prerequisites",id:"41-prerequisites",level:3},{value:"4.2 Environment Setup",id:"42-environment-setup",level:3},{value:"4.3 Docker Deployment",id:"43-docker-deployment",level:3},{value:"4.4 Local Development Setup",id:"44-local-development-setup",level:3},{value:"5. Configuration",id:"5-configuration",level:2},{value:"5.1 Environment Variables",id:"51-environment-variables",level:3},{value:"5.2 MongoDB Configuration",id:"52-mongodb-configuration",level:3},{value:"5.3 Docker Compose Configuration",id:"53-docker-compose-configuration",level:3},{value:"6. Usage",id:"6-usage",level:2},{value:"6.1 Server Startup",id:"61-server-startup",level:3},{value:"6.2 Client Connection",id:"62-client-connection",level:3},{value:"6.3 Common Usage Patterns",id:"63-common-usage-patterns",level:3},{value:"7. API Reference",id:"7-api-reference",level:2},{value:"7.1 Memory Tools",id:"71-memory-tools",level:3},{value:"store_memory",id:"store_memory",level:4},{value:"retrieve_memory",id:"retrieve_memory",level:4},{value:"7.2 Cache Tools",id:"72-cache-tools",level:3},{value:"semantic_cache_response",id:"semantic_cache_response",level:4},{value:"check_semantic_cache",id:"check_semantic_cache",level:4},{value:"7.3 Search Tools",id:"73-search-tools",level:3},{value:"hybrid_search",id:"hybrid_search",level:4},{value:"search_web",id:"search_web",level:4},{value:"8. Security Considerations",id:"8-security-considerations",level:2},{value:"8.1 Authentication and Authorization",id:"81-authentication-and-authorization",level:3},{value:"8.2 Data Encryption",id:"82-data-encryption",level:3},{value:"8.3 Input Validation",id:"83-input-validation",level:3},{value:"8.4 Known Vulnerabilities and Mitigations",id:"84-known-vulnerabilities-and-mitigations",level:3},{value:"9. Monitoring &amp; Logging",id:"9-monitoring--logging",level:2},{value:"9.1 Key Metrics",id:"91-key-metrics",level:3},{value:"9.2 Event Logger Service",id:"92-event-logger-service",level:3},{value:"9.3 Log Management",id:"93-log-management",level:3},{value:"10. Troubleshooting",id:"10-troubleshooting",level:2},{value:"10.1 Common Issues",id:"101-common-issues",level:3},{value:"10.2 Debugging Steps",id:"102-debugging-steps",level:3},{value:"10.3 Performance Issues",id:"103-performance-issues",level:3},{value:"10.4 Error Messages and Solutions",id:"104-error-messages-and-solutions",level:3},{value:"11. Development Guide",id:"11-development-guide",level:2},{value:"11.1 Codebase Organization",id:"111-codebase-organization",level:3},{value:"11.2 Development Environment Setup",id:"112-development-environment-setup",level:3},{value:"11.3 Testing Procedures",id:"113-testing-procedures",level:3},{value:"11.4 Adding New Tools",id:"114-adding-new-tools",level:3},{value:"11.5 Code Style and Guidelines",id:"115-code-style-and-guidelines",level:3},{value:"12. Maintenance &amp; Operations",id:"12-maintenance--operations",level:2},{value:"12.1 Scheduled Maintenance Tasks",id:"121-scheduled-maintenance-tasks",level:3},{value:"12.2 Backup Procedures",id:"122-backup-procedures",level:3},{value:"12.3 Updates and Patches",id:"123-updates-and-patches",level:3},{value:"12.4 Performance Optimization",id:"124-performance-optimization",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"mcp-server",children:"MCP Server"})}),"\n",(0,r.jsx)(n.p,{children:"Memory-MCP is a MongoDB-based Model Context Protocol (MCP) server that provides intelligent memory management, semantic caching, and hybrid search capabilities for AI applications. The system integrates with AWS Bedrock for embedding generation, MongoDB for data storage, and Tavily for web search functionality."}),"\n",(0,r.jsx)(n.h3,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hybrid Search"}),": Combines vector similarity and keyword matching for comprehensive search results"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AI Memory Management"}),": Stores and retrieves conversational context with intelligent summarization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Semantic Caching"}),": Caches AI responses for similar queries to improve performance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Web Search Integration"}),": External web search capabilities through Tavily API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Service Architecture"}),": Modular design with separate services for memory, cache, and logging"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Containerized Deployment"}),": Docker-based deployment with orchestration support"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"target-audience",children:"Target Audience"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"AI application developers requiring persistent memory capabilities"}),"\n",(0,r.jsx)(n.li,{children:"Organizations building conversational AI systems"}),"\n",(0,r.jsx)(n.li,{children:"Developers implementing semantic search and caching solutions"}),"\n",(0,r.jsx)(n.li,{children:"Teams working with MongoDB and AWS Bedrock integration"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"2-system-architecture",children:"2. System Architecture"}),"\n",(0,r.jsx)(n.p,{children:"The Memory-MCP system follows a microservices architecture with the main MCP server coordinating multiple specialized services:"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    %% Client Layer\n    Client[MCP Client Application]\n    \n    %% Main Server\n    MCP[Memory-MCP Server<br/>:8080<br/>FastMCP + HTTP Transport]\n    \n    %% Microservices Layer\n    subgraph "Containerized Services Network"\n        direction TB\n        MEM[AI Memory Service<br/>:8182<br/>Conversation Management]\n        CACHE[Semantic Cache Service<br/>:8183<br/>Intelligent Caching]\n        LOG[Event Logger Service<br/>:8181<br/>Centralized Logging]\n    end\n    \n    %% Core Tools Layer\n    subgraph "MCP Tools"\n        direction LR\n        T1[Memory Tools<br/>store_memory<br/>retrieve_memory]\n        T2[Cache Tools<br/>semantic_cache_response<br/>check_semantic_cache]\n        T3[Search Tools<br/>hybrid_search<br/>search_web]\n    end\n    \n    %% Data Layer\n    subgraph "MongoDB Atlas"\n        direction TB\n        DB1[Memory Collection<br/>Conversations & Context]\n        DB2[Documents Collection<br/>Vector + Full-text Search]\n        DB3[Cache Collection<br/>Semantic Query Cache]\n    end\n    \n    %% External Services\n    subgraph "AWS Bedrock"\n        direction TB\n        EMB[Titan Embed Text v1<br/>Vector Embeddings]\n        LLM[Claude Sonnet<br/>Text Generation]\n    end\n    \n    subgraph "External APIs"\n        TAVILY[Tavily Search API<br/>Web Content Retrieval]\n    end\n    \n    %% Storage & Logging\n    subgraph "Local Storage"\n        LOGS[Log Files<br/>logs/*.log]\n        RESULTS[Test Results<br/>test_results/*.json]\n    end\n    \n    %% Connections with labels\n    Client -.->|MCP Protocol<br/>HTTP Transport| MCP\n    \n    MCP --\x3e T1\n    MCP --\x3e T2  \n    MCP --\x3e T3\n    \n    T1 -.->|HTTP API| MEM\n    T2 -.->|HTTP API| CACHE\n    \n    T3 -.->|Direct Connection| DB2\n    T3 -.->|Embedding Generation| EMB\n    T3 -.->|Web Search| TAVILY\n    \n    MEM -.->|Store/Retrieve<br/>Conversations| DB1\n    MEM -.->|Context Summarization| LLM\n    MEM -.->|Similarity Search| EMB\n    \n    CACHE -.->|Cache Operations| DB3\n    CACHE -.->|Query Embeddings| EMB\n    \n    LOG -.->|Write Logs| LOGS\n    \n    %% All services log to central logger\n    MCP -.->|Application Events| LOG\n    MEM -.->|Memory Events| LOG\n    CACHE -.->|Cache Events| LOG\n    \n    %% Testing connections\n    MCP -.->|Test Results| RESULTS\n    \n    %% Styling\n    classDef client fill:#e1f5fe,stroke:#01579b,stroke-width:2px\n    classDef server fill:#f3e5f5,stroke:#4a148c,stroke-width:2px\n    classDef service fill:#e8f5e8,stroke:#1b5e20,stroke-width:2px\n    classDef tool fill:#fff3e0,stroke:#e65100,stroke-width:2px\n    classDef database fill:#fce4ec,stroke:#880e4f,stroke-width:2px\n    classDef external fill:#f1f8e9,stroke:#33691e,stroke-width:2px\n    classDef storage fill:#fff8e1,stroke:#f57f17,stroke-width:2px\n    \n    class Client client\n    class MCP server\n    class MEM,CACHE,LOG service\n    class T1,T2,T3 tool\n    class DB1,DB2,DB3 database\n    class EMB,LLM,TAVILY external\n    class LOGS,RESULTS storage'}),"\n",(0,r.jsx)(n.p,{children:"The architecture supports horizontal scaling through Docker containers and network isolation through a dedicated bridge network. The system processes requests through the FastMCP framework, which handles tool registration and HTTP transport."}),"\n",(0,r.jsx)(n.h2,{id:"3-components",children:"3. Components"}),"\n",(0,r.jsx)(n.h3,{id:"31-memory-mcp-server-main-component",children:"3.1 Memory-MCP Server (Main Component)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Central orchestration server that exposes MCP tools and coordinates with other services."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Technologies Used"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"FastMCP framework for MCP protocol implementation"}),"\n",(0,r.jsx)(n.li,{children:"Docker containerization with Python 3.12"}),"\n",(0,r.jsx)(n.li,{children:"uv for dependency management"}),"\n",(0,r.jsx)(n.li,{children:"HTTPx for asynchronous HTTP client operations"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Core Functionality"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tool registration and management"}),"\n",(0,r.jsx)(n.li,{children:"Request routing to appropriate services"}),"\n",(0,r.jsx)(n.li,{children:"Response aggregation and formatting"}),"\n",(0,r.jsx)(n.li,{children:"Error handling and logging coordination"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Interactions"}),": Communicates with all other components through HTTP APIs and database connections."]}),"\n",(0,r.jsx)(n.h3,{id:"32-ai-memory-service",children:"3.2 AI Memory Service"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Manages conversational memory storage, retrieval, and context summarization."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Conversation history management"}),"\n",(0,r.jsx)(n.li,{children:"Semantic similarity search for relevant memories"}),"\n",(0,r.jsx)(n.li,{children:"Context summarization using AI models"}),"\n",(0,r.jsx)(n.li,{children:"User-specific memory isolation"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Integration Points"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"MongoDB for persistent storage"}),"\n",(0,r.jsx)(n.li,{children:"AWS Bedrock for embedding generation"}),"\n",(0,r.jsx)(n.li,{children:"Event logging for audit trails"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"33-semantic-cache-service",children:"3.3 Semantic Cache Service"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Implements intelligent caching based on semantic similarity rather than exact matches."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Query similarity detection"}),"\n",(0,r.jsx)(n.li,{children:"Response caching with TTL management"}),"\n",(0,r.jsx)(n.li,{children:"Cache hit optimization"}),"\n",(0,r.jsx)(n.li,{children:"User-specific cache namespacing"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance Benefits"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reduced API calls to expensive AI services"}),"\n",(0,r.jsx)(n.li,{children:"Improved response times for similar queries"}),"\n",(0,r.jsx)(n.li,{children:"Cost optimization through intelligent caching"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"34-event-logger-service",children:"3.4 Event Logger Service"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Centralized logging and monitoring for all system events."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Capabilities"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Structured logging with metadata"}),"\n",(0,r.jsx)(n.li,{children:"Async and sync logging support"}),"\n",(0,r.jsx)(n.li,{children:"Log retention management"}),"\n",(0,r.jsx)(n.li,{children:"Service health monitoring"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"35-mongodb-service-integration",children:"3.5 MongoDB Service Integration"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Provides database connectivity and operations for all data persistence needs."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Connection pooling and management"}),"\n",(0,r.jsx)(n.li,{children:"Aggregation pipeline support"}),"\n",(0,r.jsx)(n.li,{children:"Vector search capabilities"}),"\n",(0,r.jsx)(n.li,{children:"Full-text search integration"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"36-aws-bedrock-integration",children:"3.6 AWS Bedrock Integration"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Handles AI model interactions for embeddings and text generation."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Models Supported"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Amazon Titan Embed Text v1 for embeddings"}),"\n",(0,r.jsx)(n.li,{children:"Anthropic Claude for text generation"}),"\n",(0,r.jsx)(n.li,{children:"Configurable model selection"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"37-external-services",children:"3.7 External Services"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tavily Web Search"}),": Provides external web search capabilities with content extraction and summarization."]}),"\n",(0,r.jsx)(n.h2,{id:"4-installation--deployment",children:"4. Installation & Deployment"}),"\n",(0,r.jsx)(n.h3,{id:"41-prerequisites",children:"4.1 Prerequisites"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Software Requirements"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Docker and Docker Compose"}),"\n",(0,r.jsx)(n.li,{children:"Python 3.12+ (for local development)"}),"\n",(0,r.jsx)(n.li,{children:"MongoDB Atlas account or local MongoDB instance"}),"\n",(0,r.jsx)(n.li,{children:"AWS account with Bedrock access"}),"\n",(0,r.jsx)(n.li,{children:"Tavily API key for web search"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Hardware Requirements"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Minimum 2GB RAM"}),"\n",(0,r.jsx)(n.li,{children:"1GB available disk space"}),"\n",(0,r.jsx)(n.li,{children:"Network connectivity for external services"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"42-environment-setup",children:"4.2 Environment Setup"}),"\n",(0,r.jsx)(n.p,{children:"Create the required environment files:"}),"\n",(0,r.jsxs)(n.p,{children:["Copy ",(0,r.jsx)(n.code,{children:".env.<service_name>.example"})," to ",(0,r.jsx)(n.code,{children:".env.<service_name>"})," file."]}),"\n",(0,r.jsx)(n.h3,{id:"43-docker-deployment",children:"4.3 Docker Deployment"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Using Docker Compose"})," (Recommended):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Clone and navigate to project directory\ngit clone <repository-url>\ncd memory-mcp\n\n# Build and start all services\ndocker-compose up -d\n\n# Verify deployment\ndocker-compose ps\ndocker-compose logs memory-mcp\n"})}),"\n",(0,r.jsx)(n.h3,{id:"44-local-development-setup",children:"4.4 Local Development Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install uv package manager\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Sync dependencies\nuv sync\n\n# Run development server\nuv run src/server.py\n"})}),"\n",(0,r.jsx)(n.h2,{id:"5-configuration",children:"5. Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"51-environment-variables",children:"5.1 Environment Variables"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Core Application Settings"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"APP_NAME=memory-mcp                                    # Application identifier\nDEBUG=False                                            # Debug mode toggle\nPORT=8080                                             # Server port\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Service URLs"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"LOGGER_SERVICE_URL=http://event-logger:8181           # Event logging service\nAI_MEMORY_SERVICE_URL=http://ai-memory:8182          # Memory management service\nSEMANTIC_CACHE_SERVICE_URL=http://semantic-cache:8183 # Semantic caching service\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"AWS Configuration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"AWS_ACCESS_KEY_ID=your_access_key                     # AWS access credentials\nAWS_SECRET_ACCESS_KEY=your_secret_key                 # AWS secret key\nAWS_REGION=us-east-1                                  # AWS region\nEMBEDDING_MODEL_ID=amazon.titan-embed-text-v1        # Bedrock embedding model\nLLM_MODEL_ID=us.anthropic.claude-sonnet-4-20250514-v1:0 # Language model\nVECTOR_DIMENSION=1536                                 # Embedding vector dimension\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"External APIs"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"TAVILY_API_KEY=your_tavily_api_key                    # Web search API key\n"})}),"\n",(0,r.jsx)(n.h3,{id:"52-mongodb-configuration",children:"5.2 MongoDB Configuration"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Connection String Format"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"mongodb+srv://username:password@cluster.mongodb.net/database_name\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Required Collections"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"documents"}),": For hybrid search functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"memory"}),": For conversational memory storage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"cache"}),": For semantic caching"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Index Requirements"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Vector search index: ",(0,r.jsx)(n.code,{children:"documents_vector_search_index"})," on ",(0,r.jsx)(n.code,{children:"embedding"})," field"]}),"\n",(0,r.jsxs)(n.li,{children:["Text search index: ",(0,r.jsx)(n.code,{children:"text"})," for full-text search capabilities"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"53-docker-compose-configuration",children:"5.3 Docker Compose Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"docker-compose.yml"})," file orchestrates multiple services:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'services:\n  memory-mcp:\n    build: .\n    ports:\n      - "8080:8080"\n    depends_on:\n      - event-logger\n      - ai-memory\n      - semantic-cache\n    networks:\n      - mcp-network\n\nnetworks:\n  mcp-network:\n    driver: bridge\n'})}),"\n",(0,r.jsx)(n.h2,{id:"6-usage",children:"6. Usage"}),"\n",(0,r.jsx)(n.h3,{id:"61-server-startup",children:"6.1 Server Startup"}),"\n",(0,r.jsx)(n.p,{children:"Start the MCP server using Docker Compose:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker-compose up -d\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The server will be available at ",(0,r.jsx)(n.code,{children:"http://localhost:8080/mcp"})," for MCP protocol connections."]}),"\n",(0,r.jsx)(n.h3,{id:"62-client-connection",children:"6.2 Client Connection"}),"\n",(0,r.jsx)(n.p,{children:"Connect to the MCP server using the FastMCP client:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from fastmcp import Client\nimport asyncio\n\nasync def connect_to_server():\n    async with Client("http://localhost:8080/mcp") as client:\n        # List available tools\n        tools = await client.list_tools()\n        print(f"Available tools: {[tool.name for tool in tools]}")\n        \n        # Use a tool\n        result = await client.call_tool("hybrid_search", {\n            "connection_string": "mongodb+srv://...",\n            "database_name": "your_database",\n            "collection_name": "documents",\n            "query": "your search query",\n            "user_id": "user@example.com"\n        })\n\nasyncio.run(connect_to_server())\n'})}),"\n",(0,r.jsx)(n.h3,{id:"63-common-usage-patterns",children:"6.3 Common Usage Patterns"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Memory Management Workflow"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Store conversation messages using ",(0,r.jsx)(n.code,{children:"store_memory"})]}),"\n",(0,r.jsxs)(n.li,{children:["Retrieve relevant context using ",(0,r.jsx)(n.code,{children:"retrieve_memory"})]}),"\n",(0,r.jsxs)(n.li,{children:["Cache AI responses using ",(0,r.jsx)(n.code,{children:"semantic_cache_response"})]}),"\n",(0,r.jsxs)(n.li,{children:["Check cache before generating new responses using ",(0,r.jsx)(n.code,{children:"check_semantic_cache"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Search Workflow"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"hybrid_search"})," for database queries combining semantic and keyword search"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"search_web"})," for external information gathering"]}),"\n",(0,r.jsx)(n.li,{children:"Weight search results based on use case requirements"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"7-api-reference",children:"7. API Reference"}),"\n",(0,r.jsx)(n.h3,{id:"71-memory-tools",children:"7.1 Memory Tools"}),"\n",(0,r.jsx)(n.h4,{id:"store_memory",children:"store_memory"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Store a message in AI memory system."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"conversation_id"})," (string): Unique conversation identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text"})," (string): Message content to store"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"message_type"}),' (string): Type of message ("human" or "ai")']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (string): User identifier for isolation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timestamp"})," (string, optional): ISO format timestamp"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),": Dictionary with storage confirmation and metadata."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = await client.call_tool("store_memory", {\n    "conversation_id": "conv_123",\n    "text": "I\'m interested in F1 racing at Marina Bay.",\n    "message_type": "human",\n    "user_id": "user@example.com",\n    "timestamp": "2025-01-09T10:30:00Z"\n})\n'})}),"\n",(0,r.jsx)(n.h4,{id:"retrieve_memory",children:"retrieve_memory"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Get relevant AI memory with context and summary."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (string): User identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"text"})," (string): Query text for memory retrieval"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),": Dictionary containing:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"related_conversation"}),": Relevant conversation history"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"conversation_summary"}),": AI-generated summary of context"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"similar_memories"}),": Related memories from user's history"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = await client.call_tool("retrieve_memory", {\n    "user_id": "user@example.com",\n    "text": "Tell me about F1 racing experiences"\n})\n'})}),"\n",(0,r.jsx)(n.h3,{id:"72-cache-tools",children:"7.2 Cache Tools"}),"\n",(0,r.jsx)(n.h4,{id:"semantic_cache_response",children:"semantic_cache_response"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Cache AI response for similar queries."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (string): User identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"query"})," (string): Original query text"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"response"})," (string): AI response to cache"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"timestamp"})," (string, optional): ISO format timestamp"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),": Dictionary with cache storage confirmation."]}),"\n",(0,r.jsx)(n.h4,{id:"check_semantic_cache",children:"check_semantic_cache"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Get cached response for similar query."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (string): User identifier"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"query"})," (string): Query text to search in cache"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),": Dictionary with cached response if found, empty if no match."]}),"\n",(0,r.jsx)(n.h3,{id:"73-search-tools",children:"7.3 Search Tools"}),"\n",(0,r.jsx)(n.h4,{id:"hybrid_search",children:"hybrid_search"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Advanced hybrid search combining vector similarity and keyword matching."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"connection_string"})," (string): MongoDB connection string"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"database_name"})," (string): Database name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"collection_name"})," (string): Collection name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"fulltext_search_field"})," (string): Field for text search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"vector_search_index_name"})," (string): Vector search index name"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"vector_search_field"})," (string): Field containing embeddings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"query"})," (string): Search query"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"user_id"})," (string): User identifier for filtering"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"weight"})," (float, default: 0.5): Balance between vector (1.0) and text (0.0) search"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"limit"})," (int, default: 10): Maximum number of results"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),": Dictionary with ",(0,r.jsx)(n.code,{children:"results"})," array containing scored documents."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = await client.call_tool("hybrid_search", {\n    "connection_string": "mongodb+srv://...",\n    "database_name": "my_database",\n    "collection_name": "documents",\n    "fulltext_search_field": "text",\n    "vector_search_index_name": "documents_vector_search_index",\n    "vector_search_field": "embedding",\n    "query": "Marina Bay F1 racing experience",\n    "user_id": "user@example.com",\n    "weight": 0.7,\n    "limit": 5\n})\n'})}),"\n",(0,r.jsx)(n.h4,{id:"search_web",children:"search_web"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Description"}),": Search web using Tavily API."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Parameters"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"query"})," (string): Web search query"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Returns"}),": List of strings containing web search results."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'result = await client.call_tool("search_web", {\n    "query": "Marina Bay Sands F1 circuit Singapore"\n})\n'})}),"\n",(0,r.jsx)(n.h2,{id:"8-security-considerations",children:"8. Security Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"81-authentication-and-authorization",children:"8.1 Authentication and Authorization"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"User Isolation"}),": The system implements user-based isolation through ",(0,r.jsx)(n.code,{children:"user_id"})," parameters, ensuring users can only access their own data."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"API Key Management"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Store AWS credentials securely using environment variables"}),"\n",(0,r.jsx)(n.li,{children:"Rotate API keys regularly"}),"\n",(0,r.jsx)(n.li,{children:"Use IAM roles for production deployments when possible"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Network Security"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use Docker networks to isolate services"}),"\n",(0,r.jsx)(n.li,{children:"Implement HTTPS for production deployments"}),"\n",(0,r.jsx)(n.li,{children:"Restrict database access to specific IP ranges"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"82-data-encryption",children:"8.2 Data Encryption"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"At Rest"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"MongoDB Atlas provides encryption at rest"}),"\n",(0,r.jsx)(n.li,{children:"Use encrypted storage volumes for Docker containers"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"In Transit"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use TLS for all external API communications"}),"\n",(0,r.jsx)(n.li,{children:"Implement HTTPS for the MCP server endpoint"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"83-input-validation",children:"8.3 Input Validation"}),"\n",(0,r.jsx)(n.p,{children:"The system implements comprehensive input validation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User ID format validation"}),"\n",(0,r.jsx)(n.li,{children:"Message type validation (human/ai only)"}),"\n",(0,r.jsx)(n.li,{children:"Query parameter sanitization"}),"\n",(0,r.jsx)(n.li,{children:"MongoDB injection prevention"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"84-known-vulnerabilities-and-mitigations",children:"8.4 Known Vulnerabilities and Mitigations"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Dependency Management"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Regular updates of Python dependencies"}),"\n",(0,r.jsxs)(n.li,{children:["Vulnerability scanning with ",(0,r.jsx)(n.code,{children:"pip audit"})]}),"\n",(0,r.jsx)(n.li,{children:"Use of pinned dependency versions in requirements.txt"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Database Security"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use of prepared statements and parameterized queries"}),"\n",(0,r.jsx)(n.li,{children:"MongoDB connection string encryption"}),"\n",(0,r.jsx)(n.li,{children:"Regular security updates for MongoDB driver"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"9-monitoring--logging",children:"9. Monitoring & Logging"}),"\n",(0,r.jsx)(n.h3,{id:"91-key-metrics",children:"9.1 Key Metrics"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance Metrics"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tool execution time"}),"\n",(0,r.jsx)(n.li,{children:"Database query response time"}),"\n",(0,r.jsx)(n.li,{children:"API call success rates"}),"\n",(0,r.jsx)(n.li,{children:"Memory usage and cache hit rates"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Business Metrics"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Number of conversations stored"}),"\n",(0,r.jsx)(n.li,{children:"Search query volume"}),"\n",(0,r.jsx)(n.li,{children:"Cache effectiveness"}),"\n",(0,r.jsx)(n.li,{children:"User activity patterns"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"92-event-logger-service",children:"9.2 Event Logger Service"}),"\n",(0,r.jsx)(n.p,{children:"The integrated event logger provides:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Structured logging with metadata"}),"\n",(0,r.jsx)(n.li,{children:"Real-time log streaming"}),"\n",(0,r.jsx)(n.li,{children:"Log retention management"}),"\n",(0,r.jsx)(n.li,{children:"Service health monitoring"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Log Levels"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"DEBUG"}),": Detailed execution information"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"INFO"}),": General operational events"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"WARNING"}),": Potential issues"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ERROR"}),": Error conditions requiring attention"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"93-log-management",children:"9.3 Log Management"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Local Logging"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["File-based logging in the ",(0,r.jsx)(n.code,{children:"logs/"})," directory"]}),"\n",(0,r.jsx)(n.li,{children:"Automatic log rotation and cleanup"}),"\n",(0,r.jsx)(n.li,{children:"Console output for development"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Remote Logging"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Centralized logging through event logger service"}),"\n",(0,r.jsx)(n.li,{children:"Structured JSON format for log analysis"}),"\n",(0,r.jsx)(n.li,{children:"Async logging to prevent performance impact"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Log Analysis"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# View recent logs\ndocker-compose logs -f memory-mcp\n\n# Check specific service logs\ndocker-compose logs ai-memory\n\n# Monitor real-time events\ntail -f logs/memory-mcp.log\n"})}),"\n",(0,r.jsx)(n.h2,{id:"10-troubleshooting",children:"10. Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"101-common-issues",children:"10.1 Common Issues"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Connection Errors"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Issue"}),": ",(0,r.jsx)(n.code,{children:"Failed to connect to MongoDB"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Solution:\n- Verify MongoDB connection string format\n- Check network connectivity\n- Ensure client IP is whitelisted in MongoDB Atlas\n- Validate credentials\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Issue"}),": ",(0,r.jsx)(n.code,{children:"Service unavailable"})," for dependent services"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Solution:\n- Check Docker container status: docker-compose ps\n- Restart services: docker-compose restart\n- Verify network configuration\n- Check service health endpoints\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tool Execution Errors"}),":"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Issue"}),": ",(0,r.jsx)(n.code,{children:"Invalid user_id"})," error"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"Solution:\n- Ensure user_id is provided and non-null\n- Use valid email format for user identification\n- Check input validation in client code\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Issue"}),": ",(0,r.jsx)(n.code,{children:"Invalid message_type"})," error"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'Solution:\n- Use only "human" or "ai" for message_type parameter\n- Check case sensitivity in parameter values\n- Validate input before tool calls\n'})}),"\n",(0,r.jsx)(n.h3,{id:"102-debugging-steps",children:"10.2 Debugging Steps"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"1. Check Service Health"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Verify all containers are running\ndocker-compose ps\n\n# Check service logs\ndocker-compose logs memory-mcp\ndocker-compose logs ai-memory\ndocker-compose logs semantic-cache\ndocker-compose logs event-logger\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"2. Test Individual Components"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Test MCP server endpoint\ncurl http://localhost:8080/health\n\n# Test database connectivity\npython -c \"import pymongo; client = pymongo.MongoClient('your_connection_string'); print(client.admin.command('ping'))\"\n\n# Test AWS Bedrock access\naws bedrock-runtime invoke-model --region us-east-1 --model-id amazon.titan-embed-text-v1 --body '{\"inputText\":\"test\"}' response.json\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"3. Validate Configuration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Check environment variables\ndocker-compose exec memory-mcp env | grep -E "(AWS|TAVILY|MONGO)"\n\n# Verify network connectivity\ndocker-compose exec memory-mcp ping ai-memory\ndocker-compose exec memory-mcp ping semantic-cache\n'})}),"\n",(0,r.jsx)(n.h3,{id:"103-performance-issues",children:"10.3 Performance Issues"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Slow Query Performance"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Check MongoDB indexes are properly created"}),"\n",(0,r.jsx)(n.li,{children:"Monitor query execution plans"}),"\n",(0,r.jsx)(n.li,{children:"Optimize search parameters and limits"}),"\n",(0,r.jsx)(n.li,{children:"Consider database scaling options"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"High Memory Usage"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Monitor container resource usage"}),"\n",(0,r.jsx)(n.li,{children:"Implement result pagination"}),"\n",(0,r.jsx)(n.li,{children:"Optimize embedding vector dimensions"}),"\n",(0,r.jsx)(n.li,{children:"Check for memory leaks in long-running processes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"104-error-messages-and-solutions",children:"10.4 Error Messages and Solutions"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Error"}),(0,r.jsx)(n.th,{children:"Cause"}),(0,r.jsx)(n.th,{children:"Solution"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ConnectionFailure"})}),(0,r.jsx)(n.td,{children:"MongoDB connection issues"}),(0,r.jsx)(n.td,{children:"Check connection string, network, credentials"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ToolError"})}),(0,r.jsx)(n.td,{children:"Invalid tool parameters"}),(0,r.jsx)(n.td,{children:"Validate input parameters against API reference"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"HTTPStatusError"})}),(0,r.jsx)(n.td,{children:"Service communication failure"}),(0,r.jsx)(n.td,{children:"Check service health, restart if needed"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ClientError"})}),(0,r.jsx)(n.td,{children:"AWS Bedrock issues"}),(0,r.jsx)(n.td,{children:"Verify AWS credentials and region settings"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"TimeoutError"})}),(0,r.jsx)(n.td,{children:"Service response timeout"}),(0,r.jsx)(n.td,{children:"Increase timeout values, check service performance"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"11-development-guide",children:"11. Development Guide"}),"\n",(0,r.jsx)(n.h3,{id:"111-codebase-organization",children:"11.1 Codebase Organization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"memory-mcp/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 server.py              # Main MCP server entry point\n\u2502   \u2514\u2500\u2500 core/\n\u2502       \u251c\u2500\u2500 config.py          # Configuration management\n\u2502       \u2514\u2500\u2500 logger.py          # Logging utilities\n\u251c\u2500\u2500 tools/                     # MCP tool implementations\n\u2502   \u251c\u2500\u2500 search_tools.py        # Search-related tools\n\u2502   \u251c\u2500\u2500 memory_tools.py        # Memory management tools\n\u2502   \u2514\u2500\u2500 cache_tools.py         # Caching tools\n\u251c\u2500\u2500 services/                  # External service integrations\n\u2502   \u251c\u2500\u2500 mongodb_service.py     # MongoDB operations\n\u2502   \u251c\u2500\u2500 bedrock_service.py     # AWS Bedrock integration\n\u2502   \u2514\u2500\u2500 external/\n\u2502       \u2514\u2500\u2500 tavily_service.py  # Tavily web search\n\u251c\u2500\u2500 utils/                     # Utility functions\n\u2502   \u251c\u2500\u2500 validators.py          # Input validation\n\u2502   \u2514\u2500\u2500 serializers.py         # Data serialization\n\u251c\u2500\u2500 tests/                     # Test suite\n\u2502   \u2514\u2500\u2500 test_memory_mcp.py     # Comprehensive tests\n\u251c\u2500\u2500 client/                    # Client examples\n\u2502   \u2514\u2500\u2500 memory-mcp-client.py   # Test client\n\u2514\u2500\u2500 docker-compose.yml         # Service orchestration\n"})}),"\n",(0,r.jsx)(n.h3,{id:"112-development-environment-setup",children:"11.2 Development Environment Setup"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Prerequisites"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Python 3.12+"}),"\n",(0,r.jsx)(n.li,{children:"uv package manager"}),"\n",(0,r.jsx)(n.li,{children:"Docker for integration testing"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Setup Steps"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Clone repository\ngit clone <repository-url>\ncd memory-mcp\n\n# Install uv\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Install dependencies\nuv sync\n\n# Set up pre-commit hooks (optional)\npre-commit install\n\n# Run development server\nuv run src/server.py\n"})}),"\n",(0,r.jsx)(n.h3,{id:"113-testing-procedures",children:"11.3 Testing Procedures"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Comprehensive Test Suite"}),":\nThe project includes a comprehensive test suite (",(0,r.jsx)(n.code,{children:"tests/test_memory_mcp.py"}),") that covers:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Tool functionality testing"}),"\n",(0,r.jsx)(n.li,{children:"Error handling validation"}),"\n",(0,r.jsx)(n.li,{children:"Performance and concurrency testing"}),"\n",(0,r.jsx)(n.li,{children:"Integration testing with external services"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Running Tests"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run full test suite\npytest tests/ -v\n\n# Run specific test\npytest tests/test_memory_mcp.py::test_hybrid_search -v\n\n# Run with coverage\npytest tests/ --cov=src --cov-report=html\n\n# Run performance tests\npytest tests/ -m performance\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test Results"}),":\nThe test suite automatically generates detailed reports:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["JSON results file: ",(0,r.jsx)(n.code,{children:"test_results/mcp_test_results_TIMESTAMP.json"})]}),"\n",(0,r.jsxs)(n.li,{children:["Summary report: ",(0,r.jsx)(n.code,{children:"test_results/mcp_test_summary_TIMESTAMP.txt"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example Test Execution"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Start services for testing\ndocker-compose up -d\n\n# Wait for services to be ready\nsleep 30\n\n# Run tests\npython tests/test_memory_mcp.py\n\n# Or use pytest\npytest tests/ -v -s\n"})}),"\n",(0,r.jsx)(n.h3,{id:"114-adding-new-tools",children:"11.4 Adding New Tools"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tool Registration Process"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Create Tool Function"}),": Implement the tool in appropriate module (e.g., ",(0,r.jsx)(n.code,{children:"tools/new_tools.py"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def register_new_tools(mcp: FastMCP):\n    @mcp.tool(name="new_tool", description="Tool description")\n    async def new_tool(param1: str, param2: int) -> Dict[str, Any]:\n        # Implementation\n        return {"result": "success"}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Register in Server"}),": Add registration to ",(0,r.jsx)(n.code,{children:"src/server.py"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from tools.new_tools import register_new_tools\nregister_new_tools(mcp)\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Add Tests"}),": Create test cases in ",(0,r.jsx)(n.code,{children:"tests/test_memory_mcp.py"})]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@pytest.mark.asyncio\nasync def test_new_tool(mcp_client, test_config):\n    result = await mcp_client.call_tool("new_tool", {\n        "param1": "test_value",\n        "param2": 42\n    })\n    # Assertions\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Update Documentation"}),": Add tool documentation to API Reference section"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"115-code-style-and-guidelines",children:"11.5 Code Style and Guidelines"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Code Formatting"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use Black for code formatting: ",(0,r.jsx)(n.code,{children:"black src/ tools/ services/"})]}),"\n",(0,r.jsx)(n.li,{children:"Follow PEP 8 style guidelines"}),"\n",(0,r.jsx)(n.li,{children:"Use type hints for all function parameters and return values"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Error Handling"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use try-catch blocks for external service calls"}),"\n",(0,r.jsx)(n.li,{children:"Log errors with appropriate context"}),"\n",(0,r.jsx)(n.li,{children:"Return structured error responses"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Async Programming"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use async/await for I/O operations"}),"\n",(0,r.jsx)(n.li,{children:"Avoid blocking operations in async functions"}),"\n",(0,r.jsx)(n.li,{children:"Use asyncio.gather() for concurrent operations"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"12-maintenance--operations",children:"12. Maintenance & Operations"}),"\n",(0,r.jsx)(n.h3,{id:"121-scheduled-maintenance-tasks",children:"12.1 Scheduled Maintenance Tasks"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Daily Tasks"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Monitor service health and logs"}),"\n",(0,r.jsx)(n.li,{children:"Check Error rates and performance metrics"}),"\n",(0,r.jsx)(n.li,{children:"Verify backup completion status"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Weekly Tasks"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Review and rotate log files"}),"\n",(0,r.jsx)(n.li,{children:"Update dependencies with security patches"}),"\n",(0,r.jsx)(n.li,{children:"Performance optimization review"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Monthly Tasks"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Full system backup verification"}),"\n",(0,r.jsx)(n.li,{children:"Security audit and vulnerability scanning"}),"\n",(0,r.jsx)(n.li,{children:"Capacity planning and scaling decisions"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"122-backup-procedures",children:"12.2 Backup Procedures"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"MongoDB Backup"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Create database backup\nmongodump --uri="mongodb+srv://..." --out=backup_$(date +%Y%m%d)\n\n# Restore from backup\nmongorestore --uri="mongodb+srv://..." backup_YYYYMMDD/\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configuration Backup"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Backup environment configuration\ntar -czf config_backup_$(date +%Y%m%d).tar.gz environment/ .env docker-compose.yml\n\n# Backup application code\ngit archive --format=tar.gz HEAD > app_backup_$(date +%Y%m%d).tar.gz\n"})}),"\n",(0,r.jsx)(n.h3,{id:"123-updates-and-patches",children:"12.3 Updates and Patches"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Dependency Updates"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Check for updates\nuv sync --upgrade\n\n# Update specific package\nuv add "package@latest"\n\n# Security updates\nuv audit\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Container Updates"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Pull latest base images\ndocker-compose pull\n\n# Rebuild with updates\ndocker-compose build --no-cache\n\n# Rolling update\ndocker-compose up -d --no-deps memory-mcp\n"})}),"\n",(0,r.jsx)(n.h3,{id:"124-performance-optimization",children:"12.4 Performance Optimization"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Database Optimization"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Monitor index usage and performance"}),"\n",(0,r.jsx)(n.li,{children:"Optimize aggregation pipelines"}),"\n",(0,r.jsx)(n.li,{children:"Implement connection pooling"}),"\n",(0,r.jsx)(n.li,{children:"Regular database maintenance tasks"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Application Optimization"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Profile memory usage and optimize"}),"\n",(0,r.jsx)(n.li,{children:"Cache frequently accessed data"}),"\n",(0,r.jsx)(n.li,{children:"Implement request rate limiting"}),"\n",(0,r.jsx)(n.li,{children:"Monitor and tune timeout values"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Infrastructure Scaling"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Horizontal scaling through container replication"}),"\n",(0,r.jsx)(n.li,{children:"Load balancing for high availability"}),"\n",(0,r.jsx)(n.li,{children:"Resource monitoring and auto-scaling"}),"\n",(0,r.jsx)(n.li,{children:"Database sharding for large datasets"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);