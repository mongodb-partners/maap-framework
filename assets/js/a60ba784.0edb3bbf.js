"use strict";(self.webpackChunkmaap_docs=self.webpackChunkmaap_docs||[]).push([[7200],{84:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"framework/agentic/components/data-loader","title":"Data Loader","description":"Introduction","source":"@site/docs/framework/agentic/components/data-loader.md","sourceDirName":"framework/agentic/components","slug":"/framework/agentic/components/data-loader","permalink":"/maap-framework/docs/framework/agentic/components/data-loader","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Agent Builder","permalink":"/maap-framework/docs/framework/agentic/components/agent-builder"},"next":{"title":"MCP Server","permalink":"/maap-framework/docs/framework/agentic/components/mcp-server"}}');var r=s(4848),o=s(8453);const t={},a="Data Loader",l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Features",id:"features",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setup Instructions",id:"setup-instructions",level:2},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Health Check",id:"health-check",level:2},{value:"Upload Files (PDF, DOCX, etc.)",id:"upload-files-pdf-docx-etc",level:2},{value:"Process Web Pages",id:"process-web-pages",level:2},{value:"Handling Responses",id:"handling-responses",level:2},{value:"Enterprise API Examples",id:"enterprise-api-examples",level:2},{value:"Register a New Source",id:"register-a-new-source",level:3},{value:"Local File System",id:"local-file-system",level:4},{value:"AWS S3 Bucket",id:"aws-s3-bucket",level:4},{value:"Google Drive",id:"google-drive",level:4},{value:"Monitoring and Logging",id:"monitoring-and-logging",level:2},{value:"Container Deployment",id:"container-deployment",level:2},{value:"Architecture",id:"architecture",level:2},{value:"Detailed Architecture",id:"detailed-architecture",level:2},{value:"Component Description",id:"component-description",level:3},{value:"Input Layer",id:"input-layer",level:4},{value:"Processing Layer",id:"processing-layer",level:4},{value:"Storage Layer",id:"storage-layer",level:4},{value:"Utility Layer",id:"utility-layer",level:4},{value:"Best Practices",id:"best-practices",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Contributing",id:"contributing",level:2},{value:"License",id:"license",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"data-loader",children:"Data Loader"})}),"\n",(0,r.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"maap-data-loader"})," project is designed to streamline data ingestion and processing for the MongoDB Atlas Application Partner (MAAP) program. This tool provides a robust mechanism to load, transform, and manage data efficiently, ensuring seamless integration with MongoDB Atlas. It supports both structured and unstructured data processing, with built-in support for document processing, embeddings generation, and integration with various AI services."]}),"\n",(0,r.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Document Processing"}),": Automated processing of various document formats"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Embedding Generation"}),": Built-in support for generating embeddings using AI services"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MongoDB Integration"}),": Direct integration with MongoDB Atlas for efficient data storage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configurable Pipeline"}),": Flexible pipeline configuration for different data processing needs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logging System"}),": Comprehensive logging system for tracking operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enterprise Support"}),": Dedicated enterprise features for large-scale deployments"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)(n.p,{children:"The project is organized as follows:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"maap-data-loader/\n\u251c\u2500\u2500 app.py                 # Main application entry point\n\u251c\u2500\u2500 config.py             # Global configuration settings\n\u251c\u2500\u2500 Dockerfile            # Container definition for deployment\n\u251c\u2500\u2500 requirements.txt      # Python dependencies\n\u251c\u2500\u2500 enterprise/          # Enterprise-specific implementations\n\u2502   \u251c\u2500\u2500 mongodb_ingest.py     # MongoDB ingestion logic\n\u2502   \u251c\u2500\u2500 pipeline_executor.py  # Data pipeline execution\n\u2502   \u2514\u2500\u2500 util/                 # Enterprise utilities\n\u2502       \u251c\u2500\u2500 base_configs.py   # Base configuration classes\n\u2502       \u251c\u2500\u2500 builder.py        # Pipeline builder\n\u2502       \u2514\u2500\u2500 configs/          # Configuration components\n\u2502           \u251c\u2500\u2500 downloader.py # Data download configurations\n\u2502           \u251c\u2500\u2500 indexer.py    # Indexing configurations\n\u2502           \u2514\u2500\u2500 source.py     # Data source configurations\n\u251c\u2500\u2500 local/               # Local development components\n\u2502   \u251c\u2500\u2500 database/        # Database interactions\n\u2502   \u251c\u2500\u2500 models/          # Data models and schemas\n\u2502   \u251c\u2500\u2500 services/        # Core services\n\u2502   \u2502   \u251c\u2500\u2500 bedrock_service.py    # AWS Bedrock integration\n\u2502   \u2502   \u251c\u2500\u2500 document_service.py   # Document processing\n\u2502   \u2502   \u2514\u2500\u2500 embedding_service.py  # Embedding generation\n\u2502   \u2514\u2500\u2500 utils/           # Utility functions\n"})}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Python 3.8 or higher"}),"\n",(0,r.jsx)(n.li,{children:"MongoDB Atlas account"}),"\n",(0,r.jsx)(n.li,{children:"Docker (for containerized deployment)"}),"\n",(0,r.jsx)(n.li,{children:"AWS account (for Bedrock service integration)"}),"\n",(0,r.jsx)(n.li,{children:"Sufficient storage for document processing"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"setup-instructions",children:"Setup Instructions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Clone the Repository"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/mongodb-partners/maap-data-loader.git\ncd maap-data-loader\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Quick Setup Using Make"}),(0,r.jsx)(n.br,{}),"\n","The project includes a Makefile for common operations. To get started quickly:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# View all available commands\nmake help\n\n# Set up virtual environment and install dependencies\nmake setup\n\n# Install additional development dependencies\nmake install-dev\n"})}),"\n",(0,r.jsx)(n.p,{children:"For other operations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"make test        # Run tests\nmake lint        # Run linting and formatting\nmake run         # Run the application\nmake clean       # Clean up build artifacts\nmake docker-build # Build Docker image\nmake docker-run  # Run Docker container\nmake logs        # View application logs\nmake backup      # Backup processed data\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Manual Setup"}),(0,r.jsx)(n.br,{}),"\n","If not using Makefile, perform the following steps:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Set Up Python Environment"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -r requirements.txt\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configure Environment Variables"}),(0,r.jsx)(n.br,{}),"\n","Create a ",(0,r.jsx)(n.code,{children:".env"})," file in the root directory with the following variables:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"MONGODB_URI=your_mongodb_connection_string\nAWS_ACCESS_KEY_ID=your_aws_access_key\nAWS_SECRET_ACCESS_KEY=your_aws_secret_key\nAWS_REGION=your_aws_region\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configure Application Settings"}),(0,r.jsx)(n.br,{}),"\n","Update ",(0,r.jsx)(n.code,{children:"config.py"})," with your specific settings:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Database configurations"}),"\n",(0,r.jsx)(n.li,{children:"Processing pipeline settings"}),"\n",(0,r.jsx)(n.li,{children:"Document processing parameters"}),"\n",(0,r.jsx)(n.li,{children:"Embedding service configurations"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Run the Application"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"python app.py\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(n.h1,{id:"maap-data-loader---curl-examples",children:"MAAP Data Loader - cURL Examples"}),"\n",(0,r.jsx)(n.p,{children:"These examples demonstrate how to interact with the MAAP Data Loader API using cURL commands."}),"\n",(0,r.jsx)(n.h2,{id:"health-check",children:"Health Check"}),"\n",(0,r.jsx)(n.p,{children:"Check if the API service is running:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl -X GET http://localhost:8000/health\n"})}),"\n",(0,r.jsx)(n.p,{children:"Expected response:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{"status": "healthy"}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"upload-files-pdf-docx-etc",children:"Upload Files (PDF, DOCX, etc.)"}),"\n",(0,r.jsx)(n.p,{children:"Upload files for processing and embedding generation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:8000/local/upload \\\n  -H "Content-Type: multipart/form-data" \\\n  -F "files=@/path/to/your/document.pdf" \\\n  -F \'json_input_params={\n    "user_id": "user123",\n    "mongodb_config": {\n      "uri": "mongodb+srv://username:password@cluster.mongodb.net",\n      "database": "maap_db",\n      "collection": "documents",\n      "index_name": "vector_index",\n      "text_field": "text",\n      "embedding_field": "embedding"\n    }\n  }\'\n'})}),"\n",(0,r.jsx)(n.h2,{id:"process-web-pages",children:"Process Web Pages"}),"\n",(0,r.jsx)(n.p,{children:"Process web content without file upload:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST http://localhost:8000/local/upload \\\n  -H "Content-Type: multipart/form-data" \\\n  -F \'json_input_params={\n    "user_id": "user123",\n    "mongodb_config": {\n      "uri": "mongodb+srv://username:password@cluster.mongodb.net",\n      "database": "maap_db",\n      "collection": "documents",\n      "index_name": "vector_index",\n      "text_field": "text",\n      "embedding_field": "embedding"\n    },\n    "web_pages": ["https://www.mongodb.com/docs", "https://www.mongodb.com/atlas"]\n  }\'\n'})}),"\n",(0,r.jsx)(n.h2,{id:"handling-responses",children:"Handling Responses"}),"\n",(0,r.jsx)(n.p,{children:"Successful response example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "success": true,\n  "message": "Successfully processed 3 documents",\n  "details": {\n    "processed_files": ["document1.pdf", "document2.docx", "document3.txt"],\n    "documents_count": 3\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Error response example:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "success": false,\n  "error": "Invalid MongoDB URI",\n  "traceback": null\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"enterprise-api-examples",children:"Enterprise API Examples"}),"\n",(0,r.jsx)(n.h3,{id:"register-a-new-source",children:"Register a New Source"}),"\n",(0,r.jsx)(n.h4,{id:"local-file-system",children:"Local File System"}),"\n",(0,r.jsx)(n.p,{children:"Register a local file system as a data source:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl --location --request GET \'localhost:8182/register/source\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  "sync_interval_seconds": 360,\n  "source": {\n    "source_type": "local",\n    "params": {\n      "remote_url": "<source-url-folder-path>",\n      "chunking_strategy": "by_title",\n      "chunk_max_characters": "1500",\n      "chunk_overlap": "100"\n    }\n  },\n  "destination": {\n    "mongodb_uri": "<your-mongodb-connection-string>",\n    "database": "<your-db-name>",\n    "collection": "<your-collection-name>",\n    "index_name": "default",\n    "embedding_path": "embeddings",\n    "embedding_dimensions": 1536,\n    "id_fields": ["field1", "field2"],\n    "create_md5": true,\n    "batch_size": 100\n  }\n}\'\n'})}),"\n",(0,r.jsx)(n.h4,{id:"aws-s3-bucket",children:"AWS S3 Bucket"}),"\n",(0,r.jsx)(n.p,{children:"Register an AWS S3 bucket as a data source:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl --location --request GET \'localhost:8182/register/source\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  "sync_interval_seconds": 360,\n  "source": {\n    "source_type": "s3",\n    "credentials": {\n      "aws_access_key_id": "<your-aws-access-key-id>",\n      "aws_secret_access_key": "<your-aws-secret-key>",\n      "aws_session_token": "<your-aws-session-token>"\n    },\n    "params": {\n      "remote_url": "<source-url-folder-path>",\n      "chunking_strategy": "by_title",\n      "chunk_max_characters": "1500",\n      "chunk_overlap": "100"\n    }\n  },\n  "destination": {\n    "mongodb_uri": "<your-mongodb-connection-string>",\n    "database": "<your-db-name>",\n    "collection": "<your-collection-name>",\n    "index_name": "default",\n    "embedding_path": "embeddings",\n    "embedding_dimensions": 1536,\n    "id_fields": ["field1", "field2"],\n    "create_md5": true,\n    "batch_size": 100\n  }\n}\'\n'})}),"\n",(0,r.jsx)(n.h4,{id:"google-drive",children:"Google Drive"}),"\n",(0,r.jsx)(n.p,{children:"Register a Google Drive folder as a data source:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl --location --request GET \'localhost:8182/register/source\' \\\n--header \'Content-Type: application/json\' \\\n--data-raw \'{\n  "sync_interval_seconds": 360,\n  "source": {\n    "source_type": "google-drive",\n    "credentials": {\n      "gcp_service_account_key_string": "<gcp_service_account_key_string>",\n      "google_drive_folder_id": "<google_drive_folder_id>"\n    },\n    "params": {\n      "remote_url": "<source-url-folder-path>",\n      "chunking_strategy": "by_title",\n      "chunk_max_characters": "1500",\n      "chunk_overlap": "100"\n    }\n  },\n  "destination": {\n    "mongodb_uri": "<your-mongodb-connection-string>",\n    "database": "<your-db-name>",\n    "collection": "<your-collection-name>",\n    "index_name": "default",\n    "embedding_path": "embeddings",\n    "embedding_dimensions": 1536,\n    "id_fields": ["field1", "field2"],\n    "create_md5": true,\n    "batch_size": 100\n  }\n}\'\n'})}),"\n",(0,r.jsx)(n.p,{children:"Expected response for all source registrations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "message": "Source registered successfully"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-and-logging",children:"Monitoring and Logging"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Logs are stored in ",(0,r.jsx)(n.code,{children:"local/logs/MAAP-Loader.log"})]}),"\n",(0,r.jsx)(n.li,{children:"Monitor MongoDB operations through Atlas dashboard"}),"\n",(0,r.jsx)(n.li,{children:"Check processing status in application logs"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"container-deployment",children:"Container Deployment"}),"\n",(0,r.jsx)(n.p,{children:"Build and run using Docker:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"docker build -t maap-data-loader .\ndocker run -d --env-file .env maap-data-loader\n"})}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"+------------------------+\n|     Data Sources       |\n| (Files, APIs, Streams) |\n+------------------------+\n           \u2193\n+------------------------+\n|   Document Processor   |\n| (Parse, Clean, Format) |\n+------------------------+\n           \u2193\n+------------------------+\n|  Embedding Generator   |\n| (AI Service Integration)|\n+------------------------+\n           \u2193\n+------------------------+\n|   MongoDB Atlas        |\n| (Storage & Indexing)   |\n+------------------------+\n"})}),"\n",(0,r.jsx)(n.h2,{id:"detailed-architecture",children:"Detailed Architecture"}),"\n",(0,r.jsx)(n.mermaid,{value:'graph TB\n    subgraph Input ["Data Input Layer"]\n        DS["Data Sources"] --\x3e FU["File Upload"]\n    end\n\n    subgraph Processing ["Processing Layer"]\n        direction TB\n        subgraph ES["Enterprise Services"]\n            PE["Pipeline Executor"] --\x3e MI["MongoDB Ingest"]\n            PE --\x3e BC["Base Configs"]\n            BC --\x3e DL["Downloader"]\n            BC --\x3e IX["Indexer"]\n            BC --\x3e SC["Source Config"]\n        end\n\n        subgraph LS["Local Services"]\n            DS1["Document Service"] --\x3e BS["Bedrock Service"]\n            DS1 --\x3e ES1["Embedding Service"]\n        end\n    end\n\n    subgraph Storage ["Storage Layer"]\n        MD["MongoDB"] --\x3e UF["Uploaded Files"]\n        MD --\x3e LOG["Logs"]\n    end\n\n    subgraph Utils ["Utility Layer"]\n        EU["Error Utils"] --\x3e LG["Logger"]\n        FUT["File Utils"] --\x3e LG\n    end\n\n    Input --\x3e Processing\n    Processing --\x3e Storage\n    Utils --\x3e Processing\n    Utils --\x3e Storage\n\n    classDef primary fill:#2374AB,stroke:#2374AB,color:white\n    classDef secondary fill:#68A2CA,stroke:#68A2CA,color:white\n    classDef tertiary fill:#95B8D3,stroke:#95B8D3,color:white\n    classDef quaternary fill:#B8D0E1,stroke:#B8D0E1,color:black\n\n    class DS,FU primary\n    class PE,MI,DS1,BS,ES1 secondary\n    class MD,UF,LOG tertiary\n    class EU,FUT,LG quaternary'}),"\n",(0,r.jsx)(n.h3,{id:"component-description",children:"Component Description"}),"\n",(0,r.jsx)(n.h4,{id:"input-layer",children:"Input Layer"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Sources"}),": Various input sources including files, APIs, and streams"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File Upload"}),": Handles file ingestion and initial validation"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"processing-layer",children:"Processing Layer"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enterprise Services"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pipeline Executor: Orchestrates data processing workflows"}),"\n",(0,r.jsx)(n.li,{children:"MongoDB Ingest: Handles data ingestion into MongoDB"}),"\n",(0,r.jsx)(n.li,{children:"Configuration Components: Manages processing settings"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Local Services"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Document Service: Processes and transforms documents"}),"\n",(0,r.jsx)(n.li,{children:"Bedrock Service: AWS Bedrock integration for AI capabilities"}),"\n",(0,r.jsx)(n.li,{children:"Embedding Service: Generates embeddings for documents"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"storage-layer",children:"Storage Layer"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MongoDB"}),": Primary data store"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Uploaded Files"}),": Temporary storage for processed files"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logs"}),": Application logging and monitoring"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"utility-layer",children:"Utility Layer"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error Utils"}),": Error handling and reporting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"File Utils"}),": File system operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Logger"}),": Logging and monitoring utilities"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Always use virtual environments"}),"\n",(0,r.jsx)(n.li,{children:"Keep sensitive information in environment variables"}),"\n",(0,r.jsx)(n.li,{children:"Regular backup of processed data"}),"\n",(0,r.jsx)(n.li,{children:"Monitor system resources during large-scale processing"}),"\n",(0,r.jsx)(n.li,{children:"Use appropriate indexes in MongoDB for better query performance"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.p,{children:"Common issues and solutions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Connection Errors"}),": Verify MongoDB URI and network connectivity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Issues"}),": Check document size and processing batch size"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Processing Errors"}),": Verify file formats and permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AWS Integration"}),": Confirm AWS credentials and permissions"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Fork the repository"}),"\n",(0,r.jsx)(n.li,{children:"Create a feature branch"}),"\n",(0,r.jsx)(n.li,{children:"Submit a pull request with detailed description"}),"\n",(0,r.jsx)(n.li,{children:"Ensure tests pass and code meets style guidelines"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,r.jsx)(n.p,{children:"This project is licensed under the MIT License - see the LICENSE file for details."})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>a});var i=s(6540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);