"use strict";(self.webpackChunkmaap_docs=self.webpackChunkmaap_docs||[]).push([[220],{4295:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"framework/agentic/components/agent-builder","title":"Agent Builder","description":"A flexible framework for building and deploying LLM agents with various capabilities using LangChain and LangGraph.","source":"@site/docs/framework/agentic/components/agent-builder.md","sourceDirName":"framework/agentic/components","slug":"/framework/agentic/components/agent-builder","permalink":"/maap-framework/docs/framework/agentic/components/agent-builder","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Components","permalink":"/maap-framework/docs/category/components"},"next":{"title":"Data Loader","permalink":"/maap-framework/docs/framework/agentic/components/data-loader"}}');var r=t(4848),o=t(8453);const a={},l="Agent Builder",s={},c=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Agent Configuration (agents.yaml)",id:"agent-configuration-agentsyaml",level:3},{value:"Agent Types",id:"agent-types",level:2},{value:"Agent Type-Specific Configuration",id:"agent-type-specific-configuration",level:3},{value:"React Agent",id:"react-agent",level:4},{value:"Reflection Agent",id:"reflection-agent",level:4},{value:"Plan-Execute-Replan Agent",id:"plan-execute-replan-agent",level:4},{value:"Long-Term Memory Agent",id:"long-term-memory-agent",level:4},{value:"Running Locally",id:"running-locally",level:2},{value:"1. Using the CLI",id:"1-using-the-cli",level:3},{value:"2. Using WSGI",id:"2-using-wsgi",level:3},{value:"3. Using Python Directly",id:"3-using-python-directly",level:3},{value:"API Endpoints",id:"api-endpoints",level:2},{value:"Example: Curl Commands",id:"example-curl-commands",level:2},{value:"Advanced Configuration",id:"advanced-configuration",level:2},{value:"Loading Prompts from Files",id:"loading-prompts-from-files",level:3},{value:"Environment Variable Substitution",id:"environment-variable-substitution",level:3},{value:"MongoDB Checkpointing",id:"mongodb-checkpointing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Logging",id:"logging",level:3},{value:"Contributing",id:"contributing",level:2},{value:"License",id:"license",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"agent-builder",children:"Agent Builder"})}),"\n",(0,r.jsx)(n.p,{children:"A flexible framework for building and deploying LLM agents with various capabilities using LangChain and LangGraph."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"MAAP Agent Builder is a modular framework that allows you to configure and deploy different types of agents with various capabilities:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multiple Agent Types"}),": Support for React, Tool-Call, Reflection, Plan-Execute-Replan, and Long-Term Memory agents"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Diverse LLM Providers"}),": Integration with Anthropic, Bedrock, Fireworks, Together AI, Cohere, Azure, Ollama, and more"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Embedding Model Support"}),": Bedrock, SageMaker, VertexAI, Azure, Together, Fireworks, Cohere, VoyageAI, Ollama, and HuggingFace"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tool Integration"}),": Easy-to-configure tools for extending agent capabilities"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Stateful Conversations"}),": Support for conversation history and checkpointing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Web API"}),": Built-in Flask server for easy deployment and interaction"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.p,{children:"Clone the repository and install the required dependencies:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/yourusername/maap-agent-builder.git\ncd maap-agent-builder\npip install -e .\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"MAAP Agent Builder is configured through YAML files and environment variables."}),"\n",(0,r.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,r.jsxs)(n.p,{children:["Create a ",(0,r.jsx)(n.code,{children:".env"})," file in the root directory with your API keys and configuration:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"# LLM API Keys\nANTHROPIC_API_KEY=your_anthropic_key\nOPENAI_API_KEY=your_openai_key\nFIREWORKS_API_KEY=your_fireworks_key\nTOGETHER_API_KEY=your_together_key\nCOHERE_API_KEY=your_cohere_key\n\n# Azure OpenAI Configuration\nAZURE_OPENAI_API_KEY=your_azure_key\nAZURE_OPENAI_ENDPOINT=https://your-endpoint.openai.azure.com\n\n# Vector DB Configuration (if using long-term memory agents)\nMONGODB_URI=your_mongodb_connection_string\n\n# Application Configuration\nLOG_LEVEL=INFO\nFLASK_SECRET_KEY=your_flask_secret_key\n"})}),"\n",(0,r.jsx)(n.h3,{id:"agent-configuration-agentsyaml",children:"Agent Configuration (agents.yaml)"}),"\n",(0,r.jsx)(n.p,{children:"Create a YAML configuration file to define your agents, LLMs, embedding models, and tools:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Configure the embedding model\nembeddings:\n - name: all-mpnet-v2\n   provider: huggingface\n   model_name: sentence-transformers/all-mpnet-base-v2\n   normalize: true\n\n# Configure the language model\nllms:\n  - name: fireworks_llm_maverick\n    provider: fireworks\n    model_name: accounts/fireworks/models/llama4-maverick-instruct-basic\n    temperature: 0.7\n    max_tokens: 4000\n    streaming: False\n    additional_kwargs:\n      top_p: 0.9\n      top_k: 50\n\n# Configure agent tools\ntools:\n  - name: product_recommender\n    tool_type: vector_search\n    description: Searches for relevant documents in the vector store\n    connection_str: ${MONGODB_URI:-mongodb://localhost:27017}\n    namespace: amazon.products\n    embedding_model: all-mpnet-v2  # Reference to the embedding model defined above\n    additional_kwargs:\n      index_name: default\n      embedding_field: embedding\n      text_field: text\n      top_k: 5\n      min_score: 0.7\n\n# Configure checkpointing\ncheckpointer:\n  connection_str: ${MONGODB_URI:-mongodb://localhost:27017}\n  db_name: agent_state\n  collection_name: checkpoints\n  name: rag_agent_checkpointer\n\n# Configure the agent\nagent:\n  name: rag_react_agent\n  agent_type: react\n  llm: fireworks_llm_maverick  # Reference to the LLM defined above\n  tools:\n    - product_recommender  # Reference to the tool defined above\n  system_prompt_path: ./prompts/rag_system_prompt.txt\n"})}),"\n",(0,r.jsx)(n.h2,{id:"agent-types",children:"Agent Types"}),"\n",(0,r.jsx)(n.p,{children:"MAAP Agent Builder supports several agent types, each with different capabilities:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"react"}),": ReAct agents that think step-by-step and use tools"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"tool_call"}),": Agents that use OpenAI-style tool calling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"reflect"}),": Agents that use a generate-reflect loop for improved reasoning"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"plan_execute_replan"}),": Agents that plan, execute steps, and replan as needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"long_term_memory"}),": Agents with vector store-backed long-term memory"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"agent-type-specific-configuration",children:"Agent Type-Specific Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Different agent types require different configuration parameters:"}),"\n",(0,r.jsx)(n.h4,{id:"react-agent",children:"React Agent"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'agent:\n  agent_type: react\n  name: react_agent\n  llm: gpt4\n  system_prompt: "You are a helpful assistant..."\n  tools:\n    - search_tool\n'})}),"\n",(0,r.jsx)(n.h4,{id:"reflection-agent",children:"Reflection Agent"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'agent:\n  agent_type: reflect\n  name: reflection_agent\n  llm: claude\n  system_prompt: "You are a helpful assistant..."\n  reflection_prompt: "Review your previous response and improve it..."\n  tools:\n    - calculator\n'})}),"\n",(0,r.jsx)(n.h4,{id:"plan-execute-replan-agent",children:"Plan-Execute-Replan Agent"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'agent:\n  agent_type: plan_execute_replan\n  name: planner_agent\n  llm: gpt4\n  system_prompt: "You are a helpful assistant..."\n  tools:\n    - search_tool\n    - calculator\n'})}),"\n",(0,r.jsx)(n.h4,{id:"long-term-memory-agent",children:"Long-Term Memory Agent"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"agent:\n  agent_type: long_term_memory\n  name: memory_agent\n  llm: claude\n  connection_str: ${MONGODB_URI}\n  namespace: agent_db.memories\n  tools:\n    - search_tool\n"})}),"\n",(0,r.jsx)(n.h2,{id:"running-locally",children:"Running Locally"}),"\n",(0,r.jsx)(n.p,{children:"There are several ways to run the MAAP Agent Builder locally:"}),"\n",(0,r.jsx)(n.h3,{id:"1-using-the-cli",children:"1. Using the CLI"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Set the configuration path\nexport AGENT_CONFIG_PATH=/path/to/your/agents.yaml\n\n# Run the server\npython -m mdb_agent_builder.cli serve --config /path/to/your/agents.yaml --port 5000\n"})}),"\n",(0,r.jsx)(n.h3,{id:"2-using-wsgi",children:"2. Using WSGI"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Set the configuration path\nexport AGENT_CONFIG_PATH=/path/to/your/agents.yaml\n\n# Run with Gunicorn (recommended for production)\ngunicorn -b 0.0.0.0:5000 mdb_agent_builder.wsgi:application\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-using-python-directly",children:"3. Using Python Directly"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"from mdb_agent_builder.app import AgentApp\n\n# Create the agent app with your configuration\nagent_app = AgentApp('/path/to/your/agents.yaml')\n\n# Run the app\nagent_app.run(host='0.0.0.0', port=5000, debug=True)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"api-endpoints",children:"API Endpoints"}),"\n",(0,r.jsx)(n.p,{children:"Once the server is running, you can interact with your agent through the following endpoints:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"GET /health"}),": Health check endpoint"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"POST /chat"}),": Send a message to the agent","\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "message": "What is the capital of France?"\n}\n'})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"POST /reset"}),": Reset the conversation history"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-curl-commands",children:"Example: Curl Commands"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Health check\ncurl http://localhost:5000/health\n\n# Send a message to the agent\ncurl -X POST http://localhost:5000/chat \\\n  -H "Content-Type: application/json" \\\n  -d \'{"message": "What is the capital of France?"}\'\n\n# Reset conversation\ncurl -X POST http://localhost:5000/reset\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-configuration",children:"Advanced Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"loading-prompts-from-files",children:"Loading Prompts from Files"}),"\n",(0,r.jsx)(n.p,{children:"Instead of including prompts directly in the YAML, you can load them from files:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"agent:\n  agent_type: react\n  name: my_agent\n  llm: gpt4\n  system_prompt_path: /path/to/system_prompt.txt\n  tools:\n    - search_tool\n"})}),"\n",(0,r.jsx)(n.h3,{id:"environment-variable-substitution",children:"Environment Variable Substitution"}),"\n",(0,r.jsx)(n.p,{children:"The configuration supports environment variable substitution with default values:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"llms:\n  - name: openai_llm\n    provider: openai\n    model_name: ${OPENAI_MODEL_NAME:-gpt-4-turbo}\n    temperature: ${TEMPERATURE:-0.7}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"mongodb-checkpointing",children:"MongoDB Checkpointing"}),"\n",(0,r.jsx)(n.p,{children:"For persistent conversations across restarts, configure a MongoDB checkpointer:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"checkpointer:\n  connection_str: ${MONGODB_CONNECTION_STRING}\n  db_name: langgraph\n  collection_name: checkpoints\n"})}),"\n",(0,r.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,r.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Missing API Keys"}),": Ensure all required API keys are set in your environment variables"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration Loading Error"}),": Check your YAML syntax for errors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"LLM Provider Not Found"}),": Verify that the LLM provider is supported and correctly configured"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tool Execution Failed"}),": Check that tools have all required parameters"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,r.jsx)(n.p,{children:"Adjust the logging level to get more detailed information:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export LOG_LEVEL=DEBUG\n"})}),"\n",(0,r.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,r.jsx)(n.p,{children:"Contributions are welcome! Please feel free to submit a Pull Request."}),"\n",(0,r.jsx)(n.h2,{id:"license",children:"License"}),"\n",(0,r.jsx)(n.p,{children:"This project is licensed under the MIT License - see the LICENSE file for details."})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);